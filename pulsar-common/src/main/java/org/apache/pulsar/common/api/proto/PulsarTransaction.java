// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/PulsarTransaction.proto

package org.apache.pulsar.common.api.proto;

public final class PulsarTransaction {
  private PulsarTransaction() {}
  public static void registerAllExtensions(
      org.apache.pulsar.shaded.com.google.protobuf.v241.ExtensionRegistryLite registry) {
  }
  public enum TransactionAckType
      implements org.apache.pulsar.shaded.com.google.protobuf.v241.Internal.EnumLite {
    Individual(0, 0),
    Cumulative(1, 1),
    ;
    
    public static final int Individual_VALUE = 0;
    public static final int Cumulative_VALUE = 1;
    
    
    public final int getNumber() { return value; }
    
    public static TransactionAckType valueOf(int value) {
      switch (value) {
        case 0: return Individual;
        case 1: return Cumulative;
        default: return null;
      }
    }
    
    public static org.apache.pulsar.shaded.com.google.protobuf.v241.Internal.EnumLiteMap<TransactionAckType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static org.apache.pulsar.shaded.com.google.protobuf.v241.Internal.EnumLiteMap<TransactionAckType>
        internalValueMap =
          new org.apache.pulsar.shaded.com.google.protobuf.v241.Internal.EnumLiteMap<TransactionAckType>() {
            public TransactionAckType findValueByNumber(int number) {
              return TransactionAckType.valueOf(number);
            }
          };
    
    private final int value;
    
    private TransactionAckType(int index, int value) {
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:pulsar.proto.TransactionAckType)
  }
  
  public interface PendingAckMetadataEntryOrBuilder
      extends org.apache.pulsar.shaded.com.google.protobuf.v241.MessageLiteOrBuilder {
    
    // required uint64 txnid_least_bits = 1 [default = 0];
    boolean hasTxnidLeastBits();
    long getTxnidLeastBits();
    
    // required uint64 txnid_most_bits = 2 [default = 0];
    boolean hasTxnidMostBits();
    long getTxnidMostBits();
    
    // optional .pulsar.proto.TransactionAckType ack_type = 3;
    boolean hasAckType();
    org.apache.pulsar.common.api.proto.PulsarTransaction.TransactionAckType getAckType();
    
    // required int64 ledger_id = 4;
    boolean hasLedgerId();
    long getLedgerId();
    
    // required int64 entry_id = 5;
    boolean hasEntryId();
    long getEntryId();
    
    // repeated int64 ack_set = 6;
    java.util.List<java.lang.Long> getAckSetList();
    int getAckSetCount();
    long getAckSet(int index);
  }
  public static final class PendingAckMetadataEntry extends
      org.apache.pulsar.shaded.com.google.protobuf.v241.GeneratedMessageLite
      implements PendingAckMetadataEntryOrBuilder, org.apache.pulsar.common.util.protobuf.ByteBufCodedOutputStream.ByteBufGeneratedMessage  {
    // Use PendingAckMetadataEntry.newBuilder() to construct.
    private io.netty.util.Recycler.Handle handle;
    private PendingAckMetadataEntry(io.netty.util.Recycler.Handle handle) {
      this.handle = handle;
    }
    
     private static final io.netty.util.Recycler<PendingAckMetadataEntry> RECYCLER = new io.netty.util.Recycler<PendingAckMetadataEntry>() {
            protected PendingAckMetadataEntry newObject(Handle handle) {
              return new PendingAckMetadataEntry(handle);
            }
          };
        
        public void recycle() {
            this.initFields();
            this.memoizedIsInitialized = -1;
            this.bitField0_ = 0;
            this.memoizedSerializedSize = -1;
            if (handle != null) { RECYCLER.recycle(this, handle); }
        }
         
    private PendingAckMetadataEntry(boolean noInit) {}
    
    private static final PendingAckMetadataEntry defaultInstance;
    public static PendingAckMetadataEntry getDefaultInstance() {
      return defaultInstance;
    }
    
    public PendingAckMetadataEntry getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private int bitField0_;
    // required uint64 txnid_least_bits = 1 [default = 0];
    public static final int TXNID_LEAST_BITS_FIELD_NUMBER = 1;
    private long txnidLeastBits_;
    public boolean hasTxnidLeastBits() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public long getTxnidLeastBits() {
      return txnidLeastBits_;
    }
    
    // required uint64 txnid_most_bits = 2 [default = 0];
    public static final int TXNID_MOST_BITS_FIELD_NUMBER = 2;
    private long txnidMostBits_;
    public boolean hasTxnidMostBits() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public long getTxnidMostBits() {
      return txnidMostBits_;
    }
    
    // optional .pulsar.proto.TransactionAckType ack_type = 3;
    public static final int ACK_TYPE_FIELD_NUMBER = 3;
    private org.apache.pulsar.common.api.proto.PulsarTransaction.TransactionAckType ackType_;
    public boolean hasAckType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public org.apache.pulsar.common.api.proto.PulsarTransaction.TransactionAckType getAckType() {
      return ackType_;
    }
    
    // required int64 ledger_id = 4;
    public static final int LEDGER_ID_FIELD_NUMBER = 4;
    private long ledgerId_;
    public boolean hasLedgerId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public long getLedgerId() {
      return ledgerId_;
    }
    
    // required int64 entry_id = 5;
    public static final int ENTRY_ID_FIELD_NUMBER = 5;
    private long entryId_;
    public boolean hasEntryId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public long getEntryId() {
      return entryId_;
    }
    
    // repeated int64 ack_set = 6;
    public static final int ACK_SET_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Long> ackSet_;
    public java.util.List<java.lang.Long>
        getAckSetList() {
      return ackSet_;
    }
    public int getAckSetCount() {
      return ackSet_.size();
    }
    public long getAckSet(int index) {
      return ackSet_.get(index);
    }
    
    private void initFields() {
      txnidLeastBits_ = 0L;
      txnidMostBits_ = 0L;
      ackType_ = org.apache.pulsar.common.api.proto.PulsarTransaction.TransactionAckType.Individual;
      ledgerId_ = 0L;
      entryId_ = 0L;
      ackSet_ = java.util.Collections.emptyList();;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasTxnidLeastBits()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTxnidMostBits()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLedgerId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEntryId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(org.apache.pulsar.shaded.com.google.protobuf.v241.CodedOutputStream output)
                        throws java.io.IOException {
        throw new RuntimeException("Cannot use CodedOutputStream");
    }
    
    public void writeTo(org.apache.pulsar.common.util.protobuf.ByteBufCodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, txnidLeastBits_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, txnidMostBits_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, ackType_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, ledgerId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt64(5, entryId_);
      }
      for (int i = 0; i < ackSet_.size(); i++) {
        output.writeInt64(6, ackSet_.get(i));
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.apache.pulsar.shaded.com.google.protobuf.v241.CodedOutputStream
          .computeUInt64Size(1, txnidLeastBits_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.apache.pulsar.shaded.com.google.protobuf.v241.CodedOutputStream
          .computeUInt64Size(2, txnidMostBits_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.apache.pulsar.shaded.com.google.protobuf.v241.CodedOutputStream
          .computeEnumSize(3, ackType_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.apache.pulsar.shaded.com.google.protobuf.v241.CodedOutputStream
          .computeInt64Size(4, ledgerId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.apache.pulsar.shaded.com.google.protobuf.v241.CodedOutputStream
          .computeInt64Size(5, entryId_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < ackSet_.size(); i++) {
          dataSize += org.apache.pulsar.shaded.com.google.protobuf.v241.CodedOutputStream
            .computeInt64SizeNoTag(ackSet_.get(i));
        }
        size += dataSize;
        size += 1 * getAckSetList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry parseFrom(
        org.apache.pulsar.shaded.com.google.protobuf.v241.ByteString data)
        throws org.apache.pulsar.shaded.com.google.protobuf.v241.InvalidProtocolBufferException {
         throw new RuntimeException("Disabled");
    }
    public static org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry parseFrom(
        org.apache.pulsar.shaded.com.google.protobuf.v241.ByteString data,
        org.apache.pulsar.shaded.com.google.protobuf.v241.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pulsar.shaded.com.google.protobuf.v241.InvalidProtocolBufferException {
         throw new RuntimeException("Disabled");
    }
    public static org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry parseFrom(byte[] data)
        throws org.apache.pulsar.shaded.com.google.protobuf.v241.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry parseFrom(
        byte[] data,
        org.apache.pulsar.shaded.com.google.protobuf.v241.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pulsar.shaded.com.google.protobuf.v241.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry parseFrom(
        java.io.InputStream input,
        org.apache.pulsar.shaded.com.google.protobuf.v241.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pulsar.shaded.com.google.protobuf.v241.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry parseFrom(
        org.apache.pulsar.shaded.com.google.protobuf.v241.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry parseFrom(
        org.apache.pulsar.shaded.com.google.protobuf.v241.CodedInputStream input,
        org.apache.pulsar.shaded.com.google.protobuf.v241.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        org.apache.pulsar.shaded.com.google.protobuf.v241.GeneratedMessageLite.Builder<
          org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry, Builder>
        implements org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntryOrBuilder, org.apache.pulsar.common.util.protobuf.ByteBufCodedInputStream.ByteBufMessageBuilder  {
      // Construct using org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry.newBuilder()
      private final io.netty.util.Recycler.Handle handle;
      private Builder(io.netty.util.Recycler.Handle handle) {
        this.handle = handle;
        maybeForceBuilderInitialization();
      }
      private final static io.netty.util.Recycler<Builder> RECYCLER = new io.netty.util.Recycler<Builder>() {
         protected Builder newObject(io.netty.util.Recycler.Handle handle) {
               return new Builder(handle);
             }
            };
      
       public void recycle() {
                clear();
                if (handle != null) {RECYCLER.recycle(this, handle);}
            }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return RECYCLER.get();
      }
      
      public Builder clear() {
        super.clear();
        txnidLeastBits_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        txnidMostBits_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        ackType_ = org.apache.pulsar.common.api.proto.PulsarTransaction.TransactionAckType.Individual;
        bitField0_ = (bitField0_ & ~0x00000004);
        ledgerId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        entryId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000010);
        ackSet_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry getDefaultInstanceForType() {
        return org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry.getDefaultInstance();
      }
      
      public org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry build() {
        org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry buildParsed()
          throws org.apache.pulsar.shaded.com.google.protobuf.v241.InvalidProtocolBufferException {
        org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry buildPartial() {
        org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry result = org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry.RECYCLER.get();
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.txnidLeastBits_ = txnidLeastBits_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.txnidMostBits_ = txnidMostBits_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.ackType_ = ackType_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.ledgerId_ = ledgerId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.entryId_ = entryId_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          ackSet_ = java.util.Collections.unmodifiableList(ackSet_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.ackSet_ = ackSet_;
        result.bitField0_ = to_bitField0_;
        return result;
      }
      
      public Builder mergeFrom(org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry other) {
        if (other == org.apache.pulsar.common.api.proto.PulsarTransaction.PendingAckMetadataEntry.getDefaultInstance()) return this;
        if (other.hasTxnidLeastBits()) {
          setTxnidLeastBits(other.getTxnidLeastBits());
        }
        if (other.hasTxnidMostBits()) {
          setTxnidMostBits(other.getTxnidMostBits());
        }
        if (other.hasAckType()) {
          setAckType(other.getAckType());
        }
        if (other.hasLedgerId()) {
          setLedgerId(other.getLedgerId());
        }
        if (other.hasEntryId()) {
          setEntryId(other.getEntryId());
        }
        if (!other.ackSet_.isEmpty()) {
          if (ackSet_.isEmpty()) {
            ackSet_ = other.ackSet_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureAckSetIsMutable();
            ackSet_.addAll(other.ackSet_);
          }
          
        }
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasTxnidLeastBits()) {
          
          return false;
        }
        if (!hasTxnidMostBits()) {
          
          return false;
        }
        if (!hasLedgerId()) {
          
          return false;
        }
        if (!hasEntryId()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(org.apache.pulsar.shaded.com.google.protobuf.v241.CodedInputStream input,
                              org.apache.pulsar.shaded.com.google.protobuf.v241.ExtensionRegistryLite extensionRegistry)
                              throws java.io.IOException {
         throw new java.io.IOException("Merge from CodedInputStream is disabled");
                              }
      public Builder mergeFrom(
          org.apache.pulsar.common.util.protobuf.ByteBufCodedInputStream input,
          org.apache.pulsar.shaded.com.google.protobuf.v241.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!input.skipField(tag)) {
                
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              txnidLeastBits_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              txnidMostBits_ = input.readUInt64();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              org.apache.pulsar.common.api.proto.PulsarTransaction.TransactionAckType value = org.apache.pulsar.common.api.proto.PulsarTransaction.TransactionAckType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000004;
                ackType_ = value;
              }
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              ledgerId_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              entryId_ = input.readInt64();
              break;
            }
            case 48: {
              ensureAckSetIsMutable();
              ackSet_.add(input.readInt64());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addAckSet(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required uint64 txnid_least_bits = 1 [default = 0];
      private long txnidLeastBits_ ;
      public boolean hasTxnidLeastBits() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public long getTxnidLeastBits() {
        return txnidLeastBits_;
      }
      public Builder setTxnidLeastBits(long value) {
        bitField0_ |= 0x00000001;
        txnidLeastBits_ = value;
        
        return this;
      }
      public Builder clearTxnidLeastBits() {
        bitField0_ = (bitField0_ & ~0x00000001);
        txnidLeastBits_ = 0L;
        
        return this;
      }
      
      // required uint64 txnid_most_bits = 2 [default = 0];
      private long txnidMostBits_ ;
      public boolean hasTxnidMostBits() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public long getTxnidMostBits() {
        return txnidMostBits_;
      }
      public Builder setTxnidMostBits(long value) {
        bitField0_ |= 0x00000002;
        txnidMostBits_ = value;
        
        return this;
      }
      public Builder clearTxnidMostBits() {
        bitField0_ = (bitField0_ & ~0x00000002);
        txnidMostBits_ = 0L;
        
        return this;
      }
      
      // optional .pulsar.proto.TransactionAckType ack_type = 3;
      private org.apache.pulsar.common.api.proto.PulsarTransaction.TransactionAckType ackType_ = org.apache.pulsar.common.api.proto.PulsarTransaction.TransactionAckType.Individual;
      public boolean hasAckType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public org.apache.pulsar.common.api.proto.PulsarTransaction.TransactionAckType getAckType() {
        return ackType_;
      }
      public Builder setAckType(org.apache.pulsar.common.api.proto.PulsarTransaction.TransactionAckType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        ackType_ = value;
        
        return this;
      }
      public Builder clearAckType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        ackType_ = org.apache.pulsar.common.api.proto.PulsarTransaction.TransactionAckType.Individual;
        
        return this;
      }
      
      // required int64 ledger_id = 4;
      private long ledgerId_ ;
      public boolean hasLedgerId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public long getLedgerId() {
        return ledgerId_;
      }
      public Builder setLedgerId(long value) {
        bitField0_ |= 0x00000008;
        ledgerId_ = value;
        
        return this;
      }
      public Builder clearLedgerId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        ledgerId_ = 0L;
        
        return this;
      }
      
      // required int64 entry_id = 5;
      private long entryId_ ;
      public boolean hasEntryId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public long getEntryId() {
        return entryId_;
      }
      public Builder setEntryId(long value) {
        bitField0_ |= 0x00000010;
        entryId_ = value;
        
        return this;
      }
      public Builder clearEntryId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        entryId_ = 0L;
        
        return this;
      }
      
      // repeated int64 ack_set = 6;
      private java.util.List<java.lang.Long> ackSet_ = java.util.Collections.emptyList();;
      private void ensureAckSetIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          ackSet_ = new java.util.ArrayList<java.lang.Long>(ackSet_);
          bitField0_ |= 0x00000020;
         }
      }
      public java.util.List<java.lang.Long>
          getAckSetList() {
        return java.util.Collections.unmodifiableList(ackSet_);
      }
      public int getAckSetCount() {
        return ackSet_.size();
      }
      public long getAckSet(int index) {
        return ackSet_.get(index);
      }
      public Builder setAckSet(
          int index, long value) {
        ensureAckSetIsMutable();
        ackSet_.set(index, value);
        
        return this;
      }
      public Builder addAckSet(long value) {
        ensureAckSetIsMutable();
        ackSet_.add(value);
        
        return this;
      }
      public Builder addAllAckSet(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureAckSetIsMutable();
        super.addAll(values, ackSet_);
        
        return this;
      }
      public Builder clearAckSet() {
        ackSet_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000020);
        
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:pulsar.proto.PendingAckMetadataEntry)
    }
    
    static {
      defaultInstance = new PendingAckMetadataEntry(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:pulsar.proto.PendingAckMetadataEntry)
  }
  
  
  static {
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
